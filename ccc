#!/usr/bin/env python

"""
Command line tool for CoreCommerce access.
"""

import ConfigParser
import cctools
import optparse
import os
import sys

def table_sort(table, field):
    return table


def table_print_divider(col_widths):
    print(
        "+" + "+".join(
            "-" * (col_width + 2)
            for col_width in col_widths
        ) + "+"
    )


def table_print_row(row, col_widths, mapping=None):
    if mapping == None:
        mapping = dict()
    print(
        "| " + " | ".join(
            "%-*s" % (col_widths[col], mapping.get(field, field))
            for col, field in enumerate(row)
        ) + " |"
    )


def table_print(table, fields, header_map=None):
    if header_map == None:
        header_map = dict()

    # Determine the column widths.
    col_widths = list()
    for field in fields:
        col_widths.append(len(header_map.get(field, field)))
    for record in table:
        for col, field in enumerate(fields):
            col_widths[col] = max(col_widths[col], len(str(record[field])))

    # Pretty print the records to the output.
    table_print_divider(col_widths)
    table_print_row(fields, col_widths, header_map)
    table_print_divider(col_widths)
    for row, record in enumerate(table):
        table_print_row(
            [cctools.html_to_plain_text(record[field]) for field in fields],
            col_widths
        )
    table_print_divider(col_widths)


def parse_object_type(option_parser, arg):
    """Determine the requested object type."""
    if "product".startswith(arg) and len(arg) > 1:
        return "product"
    elif "category".startswith(arg):
        return "category"
    elif "personalization".startswith(arg) and len(arg) > 1:
        return "personalization"
    else:
        option_parser.error("invalid object type '%s'" % arg)


def action_list(option_parser, options, args, cc_browser):
    """List objects of a type."""
    if len(args) < 2:
        option_parser.error("object type not specified")
    elif len(args) > 2:
        option_parser.error("invalid argument")
    obj_type = parse_object_type(option_parser, args[1])
    if obj_type == "product":
        products = cc_browser.get_products()
        table_print(
            products,
            [
                "SKU",
                "Product Name",
                "Price",
                "Available",
                "Track Inventory",
                "Inventory Level",
                "Teaser"
            ],
            {
                "Available": "Avail",
                "Track Inventory": "TrkInv",
                "Inventory Level": "InvLvl"
            }
        )
    elif obj_type == "category":
        categories = cc_browser.get_categories()
        categories = table_sort(categories, "Sort")
        table_print(
            categories,
            ["Category Id", "Category Name", "Sort"],
            { "Category Id": "CatId" }
        )
    elif obj_type == "personalization":
        personalizations = cc_browser.get_personalizations()
        personalizations = sorted(
            personalizations,
            key=cc_browser.personalization_sort_key
        )
        table_print(
            personalizations,
            [
                "Product SKU",
                "Product Name",
                "Question|Answer",
                "Required",
                "Track Inventory",
                "Question Enabled",
                "SKU",
                "Answer Sort Order",
                "Inventory Level",
                "Answer Input Type",
                "Main Photo"
            ],
            {
                "Product SKU": "PrdSKU",
                "Required": "QuesReq",
                "Track Inventory": "TrkInv",
                "Question Enabled": "QuesEnab",
                "Answer Sort Order": "Sort",
                "Inventory Level": "InvLvl",
                "Answer Input Type": "AnsType"
            }
        )


def find_object(option_parser, obj_type, objects, spec, keys):
    """Return an object iff there is one object matched by spec."""
    found_obj = None
    for obj in objects:
        for key in keys:
            if obj[key].startswith(spec):
                if found_obj:
                    option_parser.error(
                        "'%s' does not uniquely select one of the %s" % (
                            spec,
                            obj_type
                        )
                    )
                found_obj = obj
    if found_obj == None:
        option_parser.error("No %s match '%s'" % (obj_type, spec))
    return found_obj


def print_obj(obj, key):
    """Print obj[key] if key is defined, otherwise print entire dict."""
    if key:
        print obj[key]
    else:
        for key, value in obj.iteritems():
            print "%s: %s" % (key, value)


def action_show(option_parser, options, args, cc_browser):
    """Show attributes of a specific object."""
    if len(args) < 2:
        option_parser.error("object type not specified")
    elif len(args) < 3:
        option_parser.error("SPEC not specified")
    elif len(args) > 4:
        option_parser.error("invalid argument")
    obj_type = parse_object_type(option_parser, args[1])
    spec = args[2]
    if len(args) < 4:
        key = None
    else:
        key = args[3]
    if obj_type == "product":
        products = cc_browser.get_products()
        product = find_object(
            option_parser,
            obj_type,
            products,
            spec,
            ["SKU", "Product Name"]
        )
        print_obj(product, key)

    elif obj_type == "category":
        categories = cc_browser.get_categories()
        category = find_object(
            option_parser,
            obj_type,
            categories,
            spec,
            ["Category Name"]
        )
        print_obj(category, key)

    elif obj_type == "personalization":
        personalizations = cc_browser.get_personalizations()
        personalization = find_object(
            option_parser,
            obj_type,
            personalizations,
            spec,
            ["Question|Answer"]
        )
        print_obj(personalization, key)


def update_obj(option_parser, options, product, key_values, cc_browser):
    """Update attributes of a specific object."""
    for key_value in key_values:
        split_key_value = key_value.split("=")
        if len(split_key_value) != 2:
            option_parser.error("Invalid KEY=VALUE '%s'" % key_value)
        key = split_key_value[0]
        if not cc_browser.is_valid_product_update_key(key):
            option_parser.error("Invalid KEY '%s'" % key)
        value = split_key_value[1]
        #print "%s %s %s->%s\n" % (product["SKU"], key, product[key], value)
        cc_browser.update_product(product["SKU"], key, value)


def action_update(option_parser, options, args, cc_browser):
    """Update attributes of a specific object."""
    if len(args) < 2:
        option_parser.error("object type not specified")
    elif len(args) < 3:
        option_parser.error("SPEC not specified")
    elif len(args) < 4:
        option_parser.error("KEY=VALUE not specified")
    obj_type = parse_object_type(option_parser, args[1])
    spec = args[2]
    if obj_type == "product":
        products = cc_browser.get_products()
        product = find_object(
            option_parser,
            obj_type,
            products,
            spec,
            ["SKU", "Product Name"]
        )
        update_obj(option_parser, options, product, args[3:], cc_browser)

    elif obj_type == "category":
        categories = cc_browser.get_categories()
        category = find_object(
            option_parser,
            obj_type,
            categories,
            spec,
            ["Category Name"]
        )
        update_obj(option_parser, options, category, args[3:], cc_browser)

    elif obj_type == "personalization":
        personalizations = cc_browser.get_personalizations()
        personalization = find_object(
            option_parser,
            obj_type,
            personalizations,
            spec,
            ["Question|Answer"]
        )
        update_obj(
            option_parser,
            options,
            personalization,
            args[3:],
            cc_browser
        )


def main():
    """main"""
    default_config = os.path.join(
        os.path.dirname(os.path.abspath(__file__)),
        "cctools.cfg"
    )

    option_parser = optparse.OptionParser(
        usage="usage: %prog [options] action\n" +
        "  Actions:\n" +
        "    list { product | category | personalization }\n"
        "      List objects in table form.\n"
        "    show { product | category | personalization } SPEC [KEY]\n"
        "      List key, values of an object.\n"
        "    update { product | category | personalization } SPEC KEY=VAL ...\n"
        "      Update values of an object."
    )
    option_parser.add_option(
        "--config",
        action="store",
        metavar="FILE",
        default=default_config,
        help="configuration filename (default=%default)"
    )
    option_parser.add_option(
        "--cache-ttl",
        action="store",
        metavar="SEC",
        default=3600,
        help="cache TTL (default=%default)"
    )
    option_parser.add_option(
        "--verbose",
        action="store_true",
        default=False,
        help="display progress messages"
    )

    # Parse command line arguments.
    (options, args) = option_parser.parse_args()

    # Read config file.
    config = ConfigParser.RawConfigParser()
    config.readfp(open(options.config))

    # Create a connection to CoreCommerce.
    cc_browser = cctools.CCBrowser(
        config.get("website", "host"),
        config.get("website", "site"),
        config.get("website", "username"),
        config.get("website", "password"),
        cache_ttl=options.cache_ttl,
        verbose=options.verbose,
        #proxy="localhost:8080"  # allow MITM analysis
    )

    if len(args) < 1:
        option_parser.error("action not specified")
    action = args[0]
    if "list".startswith(action):
        action_list(option_parser, options, args, cc_browser)
    elif "show".startswith(action):
        action_show(option_parser, options, args, cc_browser)
    elif "update".startswith(action):
        action_update(option_parser, options, args, cc_browser)
    else:
        option_parser.error("invalid action '%s'" % action)

    return 0

if __name__ == "__main__":
    main()
